1.1.10 下面这段代码有什么问题？

int[] a; for (int i = 0; i < 10; i++) a[i] = i * i;

解答：它没有用

new 为 a[] 分配内存。 这段代码会产生一个 been initialized 的编译错误。

1.1.11　编写一段代码，打印出一个二维布尔数组的内容。其中，使用 行号和列号。

1.1.12 以下代码段会打印出什么结果？

variable

a might

not

have

*

表示真，空格表示假。打印出

int[] a = new int[10]; for (int i = 0; i < 10; i++)

a[i] = 9 - i; for (int i = 0; i < 10; i++)

a[i] = a[a[i]]; for (int i = 0; i < 10; i++)

System.out.println(i);

1.1.13 编写一段代码，打印出一个 M 行 N 列的二维数组的转置（交换行和列）。

1.1.14 编写一个静态方法 lg() ，接受一个整型参数 N ，返回不大于 log 2 N 的最大整数。不要使用 Math 库。

1.1.15　编写一个静态方法 histogram() ，接受一个整型数组 a[] 和一个整数 M 为参数并返回一个大小 为 M 的数组，其中第 i 个元素的值为整数 i 在参数数组中出现的次数。如果 a[] 中的值均在 0 到 M-1 之间，返回数组中所有元素之和应该和 a.length 相等。

1.1.16 给出 exR1(6) 的返回值：

public static String exR1(int n) {

if (n <= 0) return "";

56

return exR1(n-3) + n + exR1(n-2) + n; }

1.1.17 找出以下递归函数的问题：

public static String exR2(int n) {

String s = exR2(n-3) + n + exR2(n-2) + n;

if (n <= 0) return "";

return s; }

答：这段代码中的基础情况永远不会被访问。调用 exR2(3) exR2(-6) ，循环往复直到发生 StackOverflowError 。

会产生调用

exR2(0)

、

exR2(-3)

和

1.1.18 请看以下递归函数：

public static int mystery(int a, int b) {

if (b == 0) return 0;

if (b % 2 == 0) return mystery(a+a, b/2);

return mystery(a+a, b/2) + a; }

mystery(2,

25) 和 mystery(3,

计算的结果是什么？将代码中的 的问题。

11) 的返回值是多少？给定正整数 a 和 b ， mystery(a,b) + 替换为 * 并将 return 0 改为 return 1 ，然后回答相同

1.1.19 在计算机上运行以下程序：

图灵社区会员 Mtrestm(shaobo20@gmail.com) 专享 尊重版权 1.1　基础编程模型

35

public class Fibonacci {

public static long F(int N) {

if (N == 0) return 0;

if (N == 1) return 1;

return F(N-1) + F(N-2); } public static void main(String[] args) {

for (int N = 0; N < 100; N++)

StdOut.println(N + " " + F(N)); }

}

57

计算机用这段程序在一个小时之内能够得到 F(N) 结果的最大 N 值是多少？开发 F(N) 的一 个更好的实现，用数组保存已经计算过的值。

1.1.20 编写一个递归的静态方法计算 ln( N !) 的值。

1.1.21　编写一段程序， 从标准输入按行读取数据， 其中每行都包含一个名字和两个整数。 然后用 printf() 打印一张表格，每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数 的结果，精确到小数点后三位。可以用这种程序将棒球球手的击球命中率或者学生的考试分数 制成表格。

1.1.22　使用 1.1.6.4 节中的 rank() 递归方法重新实现 BinarySearch 并跟踪该方法的调用。每当该方法 被调用时，打印出它的参数 lo 和 hi 并按照递归的深度缩进。提示：为递归方法添加一个参数 来保存递归的深度。

1.1.23　为 BinarySearch 的测试用例添加一个参数： + 打印出标准输入中不在白名单上的值；-，则打 印出标准输入中在白名单上的值。

1.1.24　给出使用欧几里得算法计算 105 和 24 的最大公约数的过程中得到的一系列 p 和 q 的值。扩展该 算法中的代码得到一个程序 Euclid，从命令行接受两个参数，计算它们的最大公约数并打印出每 次调用递归方法时的两个参数。使用你的程序计算 1 111 111 和 1 234 567 的最大公约数。

1.1.25 使用数学归纳法证明欧几里得算法能够计算任意一对非负整数 p 和 q 的最大公约数。

提高题

1.1.26　将三个数字排序。假设 a 、 b 、 c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a 、 b 、 c 按照升序排列：

58

if (a > b) { t = a; a = b; b = t; } if (a > c) { t = a; a = c; c = t; } if (b > c) { t = b; b = c; c = t; }

1.1.27 二项分布。估计用以下代码计算

binomial(100, 50, 0.25)

public static double binomial(int N, int k, double p) {

将会产生的递归调用次数：

if (N == 0 && k == 0) return 1.0;

if (N < 0 || k < 0) return 0.0;

return (1.0 - p)*binomial(N-1, k, p) + p*binomial(N-1, k-1, p); }

1.1.28

将已经计算过的值保存在数组中并给出一个更好的实现。 删除重复元素。修改 BinarySearch 类中的测试用例来删去排序之后白名单中的所有重复元素。 36

第 1 章　基　　础

1.1.29　等值键。为 BinarySearch 类添加一个静态方法 rank() ，它接受一个键和一个整型有序数组（可 能存在重复键）作为参数并返回数组中小于该键的元素数量，以及一个类似的方法 count() 来 返回数组中等于该键的元素的数量。 注意：如果 i 和 j 分别是 rank(key,a) 和 count(key,a) 的返回值，那么 a[i..i+j-1] 就是数组中所有和 key 相等的元素。

1.1.30　数组练习。编写一段程序，创建一个 N×N 的布尔数组 a[][] 。其中当 i 和 j 互质时（没有相同 因子）， a[i][j] 为 true ，否则为 false 。

59

60

1.1.31　随机连接。编写一段程序，从命令行接受一个整数 N 和 double 值 p （0 到 1 之间）作为参数， 在一个圆上画出大小为 0.05 且间距相等的 N 个点，然后将每对点按照概率 p 用灰线连接。

1.1.32　直方图。假设标准输入流中含有一系列 double 值。编写一段程序，从命令行接受一个整数 N 和 两个 double 值 l 和 r。 将 (l， r) 分为 N 段并使用 StdDraw 画出输入流中的值落入每段的数量的 直方图。

1.1.33 矩阵库。编写一个 Matrix 库并实现以下 API：

public class Matrix

static

double

static double[][]

static double[][]

static

double[]

static

double[]

dot(double[] x, double[] y)

mult(double[][] a, double[][] b)

transpose(double[][] a)

mult(double[][] a, double[] x)

mult(double[] y, double[][] a)

向量点乘 矩阵和矩阵之积 转置矩阵 矩阵和向量之积 向量和矩阵之积

编写一个测试用例，从标准输入读取矩阵并测试所有方法。

1.1.34　过滤。以下哪些任务需要（在数组中，比如）保存标准输入中的所有值？哪些可以被实现为一 个过滤器且仅使用固定数量的变量和固定大小的数组（和 N 无关）？在每个问题中，输入都来 自于标准输入且含有 N 个 0 到 1 的实数。  打印出最大和最小的数  打印出所有数的中位数  打印出第 k 小的数， k 小于 100  打印出所有数的平方和  打印出 N 个数的平均值  打印出大于平均值的数的百分比  将 N 个数按照升序打印  将 N 个数按照随机顺序打印

实验题

1.1.35 模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布：

int SIDES = 6; double[] dist = new double[2*SIDES+1]; for (int i = 1; i <= SIDES; i++)

for (int j = 1; j <= SIDES; j++) dist[i+j] += 1.0;

for (int k = 2; k <= 2*SIDES; k++) dist[k] /= 36.0; 1.1　基础编程模型

37

dist[i] 的值就是两个骰子之和为 i 的概率。 用实验模拟 N 次掷骰子， 并在计算两个 1 到 6 之间的随机整数之和时记录每个值的出现频率以验证它们的概率。 N 要多大才能够保证你 的经验数据和准确数据的吻合程度达到小数点后三位？

1.1.36　乱序检查。 通过实验检查表 1.1.10 中的乱序代码是否能够产生预期的效果。 编写一个程序 ShufﬂeTest，接受命令行参数 M 和 N， 将大小为 M 的数组打乱 N 次且在每次打乱之前都将数组 重新初始化为 a[i] = i 。打印一个 M×M 的表格，对于所有的列 j ，行 i 表示的是 i 在打乱后 落到 j 的位置的次数。数组中的所有元素的值都应该接近于 N/M。

1.1.37　糟糕的打乱。假设在我们的乱序代码中你选择的是一个 0 到 N-1 而非 i 到 N-1 之间的随机整数。 证明得到的结果并非均匀地分布在 N! 种可能性之间。用上一题中的测试检验这个版本。

1.1.38　二分查找与暴力查找。根据 1.1.10.4 节给出的暴力查找法编写一个程序 BruteForceSearch ，在你 的计算机上比较它和 BinarySearch 处理 largeW.txt 和 largeT.txt 所需的时间。

1.1.39　随机匹配。编写一个使用 BinarySearch 的程序，它从命令行接受一个整型参数 T ，并会分别针 对 N=10 3 、10 4 、10 5 和 10 6 将以下实验运行 T 遍：生成两个大小为 N 的随机 6 位正整数数组并找 出同时存在于两个数组中的整数的数量。打印一个表格，对于每个 N， 给出 T 次实验中该数量 的平均值。